<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using <#= Model.ControllerNamespace #>;
using MvcTemplate.Objects;
using MvcTemplate.Services;
using MvcTemplate.Validators;
using NSubstitute;
using System;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;
using Xunit;

namespace <#= Model.ControllerTestNamespace #>
{
    public class <#= Model.Controller #>Tests : AControllerTests
    {
        private <#= Model.Controller #> controller;
        private <#= Model.IValidator #> validator;
        private <#= Model.IService #> service;
        private <#= Model.View #> <#= Model.ModelVarName #>;

        public <#= Model.Controller #>Tests()
        {
            validator = Substitute.For<<#= Model.IValidator #>>();
            service = Substitute.For<<#= Model.IService #>>();
            <#= Model.ModelVarName #> = new <#= Model.View #>();

            controller = Substitute.ForPartsOf<<#= Model.Controller #>>(validator, service);
            controller.ControllerContext = new ControllerContext();
            controller.ControllerContext.RouteData = new RouteData();
        }

        #region Method: Index()

        [Fact]
        public void Index_Gets<#= Model.View #>s()
        {
            service.GetViews().Returns(new <#= Model.View #>[0].AsQueryable());

            Object actual = controller.Index().Model;
            Object expected = service.GetViews();

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: Create()

        [Fact]
        public void Create_ReturnsEmptyView()
        {
            Assert.Null(controller.Create().Model);
        }

        #endregion

        #region Method: Create(<#= Model.View #> <#= Model.ModelVarName #>)

        [Fact]
        public void Create_ProtectsFromOverpostingId()
        {
            ProtectsFromOverposting(controller, "Create", "Id");
        }

        [Fact]
        public void Create_ReturnsSameModelIfCanNotCreate()
        {
            validator.CanCreate(<#= Model.ModelVarName #>).Returns(false);

            Object actual = (controller.Create(<#= Model.ModelVarName #>) as ViewResult).Model;
            Object expected = <#= Model.ModelVarName #>;

            Assert.Same(expected, actual);
        }

        [Fact]
        public void Create_Creates<#= Model.ShortModel #>()
        {
            validator.CanCreate(<#= Model.ModelVarName #>).Returns(true);

            controller.Create(<#= Model.ModelVarName #>);

            service.Received().Create(<#= Model.ModelVarName #>);
        }

        [Fact]
        public void Create_AfterCreateRedirectsToIndex()
        {
            validator.CanCreate(<#= Model.ModelVarName #>).Returns(true);
            controller.When(sub => sub.RedirectIfAuthorized("Index")).DoNotCallBase();
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.RedirectIfAuthorized("Index");
            ActionResult actual = controller.Create(<#= Model.ModelVarName #>);

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: Details(String id)

        [Fact]
        public void Details_ReturnsNotEmptyView()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelVarName #>.Id).Returns(<#= Model.ModelVarName #>);
            controller.When(sub => sub.NotEmptyView(<#= Model.ModelVarName #>)).DoNotCallBase();
            controller.NotEmptyView(<#= Model.ModelVarName #>).Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.NotEmptyView(<#= Model.ModelVarName #>);
            ActionResult actual = controller.Details(<#= Model.ModelVarName #>.Id);

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: Edit(String id)

        [Fact]
        public void Edit_ReturnsNotEmptyView()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelVarName #>.Id).Returns(<#= Model.ModelVarName #>);
            controller.When(sub => sub.NotEmptyView(<#= Model.ModelVarName #>)).DoNotCallBase();
            controller.NotEmptyView(<#= Model.ModelVarName #>).Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.NotEmptyView(<#= Model.ModelVarName #>);
            ActionResult actual = controller.Edit(<#= Model.ModelVarName #>.Id);

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: Edit(<#= Model.View #> <#= Model.ModelVarName #>)

        [Fact]
        public void Edit_ReturnsSameModelIfCanNotEdit()
        {
            validator.CanEdit(<#= Model.ModelVarName #>).Returns(false);

            Object actual = (controller.Edit(<#= Model.ModelVarName #>) as ViewResult).Model;
            Object expected = <#= Model.ModelVarName #>;

            Assert.Same(expected, actual);
        }

        [Fact]
        public void Edit_Edits<#= Model.ShortModel #>()
        {
            validator.CanEdit(<#= Model.ModelVarName #>).Returns(true);

            controller.Edit(<#= Model.ModelVarName #>);

            service.Received().Edit(<#= Model.ModelVarName #>);
        }

        [Fact]
        public void Edit_AfterEditRedirectsToIndex()
        {
            validator.CanEdit(<#= Model.ModelVarName #>).Returns(true);
            controller.When(sub => sub.RedirectIfAuthorized("Index")).DoNotCallBase();
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.RedirectIfAuthorized("Index");
            ActionResult actual = controller.Edit(<#= Model.ModelVarName #>);

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: Delete(String id)

        [Fact]
        public void Delete_ReturnsNotEmptyView()
        {
            service.Get<<#= Model.View #>>(<#= Model.ModelVarName #>.Id).Returns(<#= Model.ModelVarName #>);
            controller.When(sub => sub.NotEmptyView(<#= Model.ModelVarName #>)).DoNotCallBase();
            controller.NotEmptyView(<#= Model.ModelVarName #>).Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult expected = controller.NotEmptyView(<#= Model.ModelVarName #>);
            ActionResult actual = controller.Delete(<#= Model.ModelVarName #>.Id);

            Assert.Same(expected, actual);
        }

        #endregion

        #region Method: DeleteConfirmed(String id)

        [Fact]
        public void DeleteConfirmed_Deletes<#= Model.ShortModel #>()
        {
            controller.DeleteConfirmed(<#= Model.ModelVarName #>.Id);

            service.Received().Delete(<#= Model.ModelVarName #>.Id);
        }

        [Fact]
        public void Delete_AfterDeleteRedirectsToIndex()
        {
            controller.When(sub => sub.RedirectIfAuthorized("Index")).DoNotCallBase();
            controller.RedirectIfAuthorized("Index").Returns(new RedirectToRouteResult(new RouteValueDictionary()));

            ActionResult actual = controller.DeleteConfirmed(<#= Model.ModelVarName #>.Id);
            ActionResult expected = controller.RedirectIfAuthorized("Index");

            Assert.Same(expected, actual);
        }

        #endregion
    }
}
