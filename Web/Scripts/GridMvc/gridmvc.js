/***
* Grid.Mvc
* Examples and documentation at: http://gridmvc.codeplex.com
* Version: 3.0.0
* Requires: window.jQuery v1.3+
* LGPL license: http://gridmvc.codeplex.com/license
*/
window.pageGrids = window.pageGrids || {}, $.fn.extend({ gridmvc: function () { var a = []; return $(this).each(function () { if ($(this).data("gridmvc")) a.push($(this).data("gridmvc")); else { var b = { lang: $(this).attr("data-lang"), selectable: "true" == $(this).attr("data-selectable"), multiplefilters: "true" == $(this).attr("data-multiplefilters") }, c = new GridMvc(this, b), d = $(this).attr("data-gridname"); d.length > 0 && (window.pageGrids[$(this).attr("data-gridname")] = c), a.push(c), $(this).data("gridmvc", c) } }), 1 == a.length ? a[0] : a } }), GridMvc = function (a) { function b(b, c) { this.jqContainer = a(b), c = c || {}, this.options = a.extend({}, this.defaults(), c), this.init() } return b.prototype.init = function () { this.lang = GridMvc.lang[this.options.lang], "undefined" == typeof this.lang && (this.lang = GridMvc.lang.en), this.events = [], this.options.selectable && this.initGridRowsEvents(), this.filterWidgets = [], this.addFilterWidget(new TextFilterWidget), this.addFilterWidget(new NumberFilterWidget), this.addFilterWidget(new DateTimeFilterWidget), this.addFilterWidget(new BooleanFilterWidget), this.openedMenuBtn = null, this.initFilters() }, b.prototype.initGridRowsEvents = function () { var a = this; this.jqContainer.on("click", ".grid-row", function () { a.rowClicked.call(this, a) }) }, b.prototype.rowClicked = function (b) { if (b.options.selectable) { var c = a(this).closest(".grid-row"); if (!(c.length <= 0)) { var d = {}; c.find(".grid-cell").each(function () { var b = a(this).attr("data-name"); b.length > 0 && (d[b] = a(this).text()) }); var e = a.Event("RowClicked"); b.notifyOnRowSelect(d, e), e.isDefaultPrevented() || b.markRowSelected(c) } } }, b.prototype.markRowSelected = function (a) { this.jqContainer.find(".grid-row.grid-row-selected").removeClass("grid-row-selected"), a.addClass("grid-row-selected") }, b.prototype.defaults = function () { return { selectable: !0, multiplefilters: !1, lang: "en" } }, b.prototype.onRowSelect = function (a) { this.events.push({ name: "onRowSelect", callback: a }) }, b.prototype.notifyOnRowSelect = function (a, b) { b.row = a, this.notifyEvent("onRowSelect", b) }, b.prototype.notifyEvent = function (a, b) { for (var c = 0; c < this.events.length && (this.events[c].name != a || this.events[c].callback(b)) ; c++); }, b.prototype.initFilters = function () { var b = this.filterMenuHtml(), c = this; this.jqContainer.find(".grid-filter").each(function () { a(this).click(function () { return c.openFilterPopup.call(this, c, b) }) }) }, b.prototype.openFilterPopup = function (b, c) { var d = a(this).attr("data-type") || "", e = b.getFilterWidgetForType(d); if (null == e) return !1; if (this.hasAttribute("data-rendered")) { var f = b.openMenuOnClick.call(this, b); return b.setupPopupInitialPosition(a(this)), f || "undefined" == typeof e.onShow || e.onShow(), f } var g = a(this).attr("data-name") || "", h = a(this).attr("data-filterdata") || "", i = a(this).attr("data-widgetdata") || "{}", j = b.parseFilterValues(h) || {}, k = a(this).attr("data-url") || ""; a(this).attr("data-rendered", "1"), a(this).append(c); var l = a(this).find(".grid-popup-widget"); if ("undefined" != typeof e.onRender && e.onRender(l, b.lang, d, j, function (a) { b.closeOpenedPopups(), b.applyFilterValues(k, g, a, !1) }, a.parseJSON(i)), a(this).find(".grid-filter-btn").hasClass("filtered") && e.showClearFilterButton()) { var m = a(this).find(".grid-popup-additional"); m.append(b.getClearFilterButton(k)), m.find(".grid-filter-clear").click(function () { b.applyFilterValues(k, g, "", !0) }) } var n = b.openMenuOnClick.call(this, b); return "undefined" != typeof e.onShow && e.onShow(), b.setupPopupInitialPosition(a(this)), n }, b.prototype.setupPopupInitialPosition = function (b) { function d() { var a = b.find(".grid-dropdown-arrow"); return { arrow: a, currentDropLeft: parseInt(c.css("left")), currentArrowLeft: parseInt(a.css("left")) } } var c = b.find(".grid-dropdown"), e = c.offset().left; if (0 > e) { var f = d(); return f.arrow.css({ left: f.currentArrowLeft + e - 10 + "px" }), c.css({ left: f.currentDropLeft - e + 10 + "px" }), void 0 } var g = c.width(), h = a(window).width() - (e + g); if (0 > h) { var f = d(); f.arrow.css({ left: f.currentArrowLeft - h + 10 + "px" }), c.css({ left: f.currentDropLeft + h - 10 + "px" }) } }, b.prototype.filterMenuHtml = function () { return '<div class="dropdown dropdown-menu grid-dropdown" style="display: none;">                    <div class="grid-dropdown-arrow"></div>                    <div class="grid-dropdown-inner">                            <div class="grid-popup-widget"></div>                            <div class="grid-popup-additional"></div>                    </div>                </div>' }, b.prototype.getClearFilterButton = function () { return '<ul class="menu-list">                    <li><a class="grid-filter-clear" href="javascript:void(0);">' + this.lang.clearFilterLabel + "</a></li>                </ul>" }, b.prototype.addFilterWidget = function (a) { this.filterWidgets.push(a) }, b.prototype.parseFilterValues = function (b) { for (var c = a.parseJSON(b), d = [], e = 0; e < c.length; e++) d.push({ filterValue: this.urldecode(c[e].FilterValue), filterType: c[e].FilterType, columnName: c[e].ColumnName }); return d }, b.prototype.urldecode = function (a) { return decodeURIComponent((a + "").replace(/\+/g, "%20")) }, b.prototype.getFilterWidgetForType = function (b) { for (var c = 0; c < this.filterWidgets.length; c++) if (a.inArray(b, this.filterWidgets[c].getAssociatedTypes()) >= 0) return this.filterWidgets[c]; return null }, b.prototype.replaceFilterWidget = function (b, c) { for (var d = 0; d < this.filterWidgets.length; d++) if (a.inArray(b, this.filterWidgets[d].getAssociatedTypes()) >= 0) return this.filterWidgets.splice(d, 1), this.addFilterWidget(c), !0; return !1 }, b.prototype.applyFilterValues = function (b, c, d, e) { var f = this.jqContainer.find(".grid-filter"); b.length > 0 && (b += "&"); var g = ""; if (e || (g += this.getFilterQueryData(c, d)), this.options.multiplefilters) for (var h = 0; h < f.length; h++) if (a(f[h]).attr("data-name") != c) { var i = this.parseFilterValues(a(f[h]).attr("data-filterdata")); 0 != i.length && (g.length > 0 && (g += "&"), g += this.getFilterQueryData(a(f[h]).attr("data-name"), i)) } window.location.search = b + g }, b.prototype.getFilterQueryData = function (a, b) { for (var c = "", d = 0; d < b.length; d++) c += "grid-filter=" + encodeURIComponent(a) + "__" + b[d].filterType + "__" + encodeURIComponent(b[d].filterValue), d != b.length - 1 && (c += "&"); return c }, b.prototype.openMenuOnClick = function (b) { if (a(this).hasClass("clicked")) return !0; b.closeOpenedPopups(), a(this).addClass("clicked"); var c = a(this).find(".dropdown-menu"); return 0 == c.length ? !0 : (c.show(), c.addClass("opened"), b.openedMenuBtn = a(this), a(document).bind("click.gridmvc", function (a) { b.documentCallback(a, b) }), !1) }, b.prototype.documentCallback = function (b, c) { b = b || event; var d = b.target || b.srcElement, e = a(".dropdown-menu.opened").get(0), f = a("html").get(0); if ("undefined" != typeof e) do { if (e == d) return; f == d && (e.style.display = "none", a(e).removeClass("opened")), d = d.parentNode } while (d); null != c.openedMenuBtn && c.openedMenuBtn.removeClass("clicked"), a(document).unbind("click.gridmvc") }, b.prototype.closeOpenedPopups = function () { var b = a(".dropdown-menu.opened"); b.hide(), b.removeClass("opened"), null != this.openedMenuBtn && this.openedMenuBtn.removeClass("clicked") }, b.prototype.selectable = function (a) { this.options.selectable = a }, b }(window.jQuery), "undefined" == typeof GridMvc.lang && (GridMvc.lang = {}), GridMvc.lang.en = { filterTypeLabel: "Type: ", filterValueLabel: "Value:", applyFilterButtonText: "Apply", filterSelectTypes: { Equals: "Equals", StartsWith: "StartsWith", Contains: "Contains", EndsWith: "EndsWith", GreaterThan: "Greater than", LessThan: "Less than" }, code: "en", boolTrueLabel: "Yes", boolFalseLabel: "No", clearFilterLabel: "Clear filter" }, TextFilterWidget = function () { function b() { } return b.prototype.getAssociatedTypes = function () { return ["System.String"] }, b.prototype.onShow = function () { var a = this.container.find(".grid-filter-input"); a.length <= 0 || a.focus() }, b.prototype.showClearFilterButton = function () { return !0 }, b.prototype.onRender = function (a, b, c, d, e) { this.cb = e, this.container = a, this.lang = b, this.value = d.length > 0 ? d[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, b.prototype.renderWidget = function () { var a = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="2" ' + ("2" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Contains + '</option>                            <option value="3" ' + ("3" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.StartsWith + '</option>                            <option value="4" ' + ("4" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.EndsWith + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply" >' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(a) }, b.prototype.registerEvents = function () { var a = this.container.find(".grid-apply"), b = this; a.click(function () { var a = b.container.find(".grid-filter-type").val(), c = b.container.find(".grid-filter-input").val(), d = [{ filterType: a, filterValue: c }]; b.cb(d) }), this.container.find(".grid-filter-input").keyup(function (b) { 13 == b.keyCode && a.click(), 27 == b.keyCode && GridMvc.closeOpenedPopups() }) }, b }(window.jQuery), NumberFilterWidget = function () { function b() { } return b.prototype.showClearFilterButton = function () { return !0 }, b.prototype.getAssociatedTypes = function () { return ["System.Int32", "System.Double", "System.Decimal", "System.Byte", "System.Single", "System.Float", "System.Int64"] }, b.prototype.onShow = function () { var a = this.container.find(".grid-filter-input"); a.length <= 0 || a.focus() }, b.prototype.onRender = function (a, b, c, d, e) { this.cb = e, this.container = a, this.lang = b, this.typeName = c, this.value = d.length > 0 ? d[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, b.prototype.renderWidget = function () { var a = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + ("5" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + ("6" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply">' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(a) }, b.prototype.registerEvents = function () { var a = this, b = this.container.find(".grid-apply"); b.click(function () { var b = a.container.find(".grid-filter-type").val(), c = a.container.find(".grid-filter-input").val(), d = [{ filterType: b, filterValue: c }]; a.cb(d) }); var c = this.container.find(".grid-filter-input"); c.keyup(function (a) { 13 == a.keyCode && b.click(), 27 == a.keyCode && GridMvc.closeOpenedPopups() }).keypress(function (b) { return a.validateInput.call(a, b) }), "System.Byte" == this.typeName && c.attr("maxlength", "3") }, b.prototype.validateInput = function (a) { var b = a || window.event, c = b.keyCode || b.which; c = String.fromCharCode(c); var d; switch (this.typeName) { case "System.Byte": case "System.Int32": case "System.Int64": d = /[0-9]/; break; default: d = /[0-9]|\.|\,/ } d.test(c) || (b.returnValue = !1, b.preventDefault && b.preventDefault()) }, b }(window.jQuery), DateTimeFilterWidget = function (a) { function b() { } return b.prototype.getAssociatedTypes = function () { return ["System.DateTime"] }, b.prototype.showClearFilterButton = function () { return !0 }, b.prototype.onRender = function (b, c, d, e, f, g) { this.datePickerIncluded = "undefined" != typeof a.fn.datepicker, this.cb = f, this.data = g, this.container = b, this.lang = c, this.value = e.length > 0 ? e[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, b.prototype.renderWidget = function () { var a = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + ("1" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + ("5" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + ("6" == this.value.filterType ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + "</option>                        </select>                    </div>" + (this.datePickerIncluded ? '<div class="grid-filter-datepicker"></div>' : '<div class="form-group">                                <label>' + this.lang.filterValueLabel + '</label>                                <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                             </div>                             <div class="grid-filter-buttons">                                <input type="button" class="btn btn-primary grid-apply" value="' + this.lang.applyFilterButtonText + '" />                             </div>'); if (this.container.append(a), this.datePickerIncluded) { var b = this.data || {}; b.format = b.format || "yyyy-mm-dd", b.language = b.language || this.lang.code; var c = this, d = this.container.find(".grid-filter-datepicker"); d.datepicker(b).on("changeDate", function (a) { var b = c.container.find(".grid-filter-type").val(), d = [{ filterType: b, filterValue: a.format() }]; c.cb(d) }), this.value.filterValue && d.datepicker("update", this.value.filterValue) } }, b.prototype.registerEvents = function () { var a = this, b = this.container.find(".grid-apply"); b.click(function () { var b = a.container.find(".grid-filter-type").val(), c = a.container.find(".grid-filter-input").val(), d = [{ filterType: b, filterValue: c }]; a.cb(d) }), this.container.find(".grid-filter-input").keyup(function (a) { 13 == a.keyCode && b.click() }) }, b }(window.jQuery), BooleanFilterWidget = function (a) { function b() { } return b.prototype.getAssociatedTypes = function () { return ["System.Boolean"] }, b.prototype.showClearFilterButton = function () { return !0 }, b.prototype.onRender = function (a, b, c, d, e) { this.cb = e, this.container = a, this.lang = b, this.value = d.length > 0 ? d[0] : { filterType: 1, filterValue: "" }, this.renderWidget(), this.registerEvents() }, b.prototype.renderWidget = function () { var a = "<label>" + this.lang.filterValueLabel + '</label>                    <ul class="menu-list">                        <li><a class="grid-filter-choose ' + ("true" == this.value.filterValue ? "choose-selected" : "") + '" data-value="true" href="javascript:void(0);">' + this.lang.boolTrueLabel + '</a></li>                        <li><a class="grid-filter-choose ' + ("false" == this.value.filterValue ? "choose-selected" : "") + '" data-value="false" href="javascript:void(0);">' + this.lang.boolFalseLabel + "</a></li>                    </ul>"; this.container.append(a) }, b.prototype.registerEvents = function () { var b = this, c = this.container.find(".grid-filter-choose"); c.click(function () { var c = [{ filterType: "1", filterValue: a(this).attr("data-value") }]; b.cb(c) }) }, b }(window.jQuery), function (a) { a && a(function () { a(".grid-mvc").each(function () { a(".grid-mvc").gridmvc() }) }) }(window.jQuery);