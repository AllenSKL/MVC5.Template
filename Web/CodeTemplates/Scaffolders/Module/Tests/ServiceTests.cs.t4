<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MvcTemplate.Data.Core;
using MvcTemplate.Objects;
using MvcTemplate.Services;
using MvcTemplate.Tests.Data;
using MvcTemplate.Tests.Helpers;
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;

namespace MvcTemplate.Tests.Unit.Services
{
    [TestFixture]
    public class <#= Model.Name #>
    {
        private <#= Model.Service #> service;
        private <#= Model.Model #> <#= Model.ModelName #>;
        private Context context;

        [SetUp]
        public void SetUp()
        {
            context = new TestingContext();
            service = new <#= Model.Service #>(new UnitOfWork(context));

            TearDownData();
            SetUpData();
        }

        [TearDown]
        public void TearDown()
        {
            service.Dispose();
            context.Dispose();
        }

        #region Method: GetViews()

        [Test]
        public void GetViews_Gets<#= Model.View #>s()
        {
            IEnumerable<<#= Model.View #>> actual = service.GetViews();
            IEnumerable<<#= Model.View #>> expected = context
                .Set<<#= Model.Model #>>()
                .Project()
                .To<<#= Model.View #>>()
                .OrderByDescending(view => view.EntityDate);

            TestHelper.EnumPropertyWiseEquals(expected, actual);
        }

        #endregion

        #region Method: GetView(String id)

        [Test]
        public void GetView_GetsViewById()
        {
            <#= Model.Model #> modelInDatabase = context.Set<<#= Model.Model #>>().SingleOrDefault(model => model.Id == <#= Model.ModelName #>.Id);
            <#= Model.View #> expected = Mapper.Map<<#= Model.Model #>, <#= Model.View #>>(modelInDatabase);
            <#= Model.View #> actual = service.GetView(<#= Model.ModelName #>.Id);

            TestHelper.PropertyWiseEquals(expected, actual);
        }

        #endregion

        #region Method: Create(<#= Model.View #> view)

        [Test]
        public void Create_Creates<#= Model.Model #>()
        {
            TearDownData();

            <#= Model.View #> expected = new <#= Model.View #>();
            service.Create(expected);

            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().SingleOrDefault(model => model.Id == expected.Id);

            Assert.AreEqual(expected.EntityDate, actual.EntityDate);
            Assert.Inconclusive("Not all properties tested");
        }

        #endregion

        #region Method: Edit(<#= Model.View #> view)

        [Test]
        public void Edit_Edits<#= Model.Model #>()
        {
            <#= Model.View #> expected = service.GetView(<#= Model.ModelName #>.Id);
            Assert.Inconclusive("No update made");
            service.Edit(expected);

            context = new TestingContext();
            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().SingleOrDefault(model => model.Id == expected.Id);

            Assert.AreEqual(expected.EntityDate, actual.EntityDate);
            Assert.Inconclusive("Not all properties tested");
        }

        #endregion

        #region Method: Delete(String id)

        [Test]
        public void Delete_Deletes<#= Model.Model #>()
        {
            if (context.Set<<#= Model.Model #>>().SingleOrDefault(model => model.Id == <#= Model.ModelName #>.Id) == null)
                Assert.Inconclusive();

            service.Delete(<#= Model.ModelName #>.Id);
            context = new TestingContext();

            Assert.IsNull(context.Set<<#= Model.Model #>>().SingleOrDefault(model => model.Id == <#= Model.ModelName #>.Id));
        }

        #endregion

        #region Test helpers

        private void SetUpData()
        {
            <#= Model.ModelName #> = new <#= Model.Model #>();

            context.Set<<#= Model.Model #>>().Add(<#= Model.ModelName #>);
            context.SaveChanges();
        }
        private void TearDownData()
        {
            context.Set<<#= Model.Model #>>().RemoveRange(context.Set<<#= Model.Model #>>().Where(model => model.Id == <#= Model.ModelName #>.Id));
            context.SaveChanges();
        }

        #endregion
    }
}
