<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using Moq;
using Moq.Protected;
using NUnit.Framework;
using System;
using System.Linq;
using System.Reflection;
using System.Web.Mvc;
using System.Web.Routing;
using <#= Model.ControllerNamespace #>;
using Template.Objects;
using Template.Services;

namespace <#= Model.Namespace #>
{
    [TestFixture]
    public class <#= Model.Name #>
    {
        private Mock<<#= Model.ServiceInterface #>> serviceMock;
        private <#= Model.Controller #> controller;

        [SetUp]
        public void SetUp()
        {
            serviceMock = new Mock<<#= Model.ServiceInterface #>>(MockBehavior.Strict);
            serviceMock.SetupAllProperties();

            controller = new <#= Model.Controller #>(serviceMock.Object);
            controller.ControllerContext = new ControllerContext();
            controller.ControllerContext.RouteData = new RouteData();
        }

        #region Method: Index()

        [Test]
        public void Index_ReturnsModelsView()
        {
            IQueryable<<#= Model.View #>> expected = new[] { new <#= Model.View #>() }.AsQueryable();
            serviceMock.Setup(mock => mock.GetViews()).Returns(expected);
            Object actual = controller.Index().Model;

            Assert.AreSame(expected, actual);
        }

        #endregion

        #region Method: Create()

        [Test]
        public void Create_ReturnsNew<#= Model.View #>()
        {
            <#= Model.View #> actual = controller.Create().Model as <#= Model.View #>;

            Assert.Inconclusive("No properties tested");
        }

        #endregion

        #region Method: Create([Bind(Exclude = "Id")] <#= Model.View #> <#= Model.ViewName #>)

        [Test]
        public void Create_ProtectsFromOverpostingId()
        {
            MethodInfo createMethod = controller
                .GetType()
                .GetMethods()
                .First(method =>
                    method.Name == "Create" &&
                    method.GetCustomAttribute<HttpPostAttribute>() != null);

            CustomAttributeData customParameterAttribute = createMethod.GetParameters().First().CustomAttributes.First();

            Assert.AreEqual(typeof(BindAttribute), customParameterAttribute.AttributeType);
            Assert.AreEqual("Exclude", customParameterAttribute.NamedArguments.First().MemberName);
            Assert.AreEqual("Id", customParameterAttribute.NamedArguments.First().TypedValue.Value);
        }

        [Test]
        public void Create_ReturnsSameModelIfCanNotCreate()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanCreate(<#= Model.ViewName #>)).Returns(false);

            Assert.AreSame(<#= Model.ViewName #>, (controller.Create(<#= Model.ViewName #>) as ViewResult).Model);
        }

        [Test]
        public void Create_Creates<#= Model.View #>()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanCreate(<#= Model.ViewName #>)).Returns(true);
            serviceMock.Setup(mock => mock.Create(<#= Model.ViewName #>));
            controller.Create(<#= Model.ViewName #>);

            serviceMock.Verify(mock => mock.Create(<#= Model.ViewName #>), Times.Once());
        }

        [Test]
        public void Create_AfterSuccessfulCreateRedirectsToIndexIfAuthorized()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanCreate(<#= Model.ViewName #>)).Returns(true);
            serviceMock.Setup(mock => mock.Create(<#= Model.ViewName #>));

            RedirectToRouteResult expected = new RedirectToRouteResult(new RouteValueDictionary());
            Mock<<#= Model.Controller #>> controllerMock = new Mock<<#= Model.Controller #>>(serviceMock.Object) { CallBase = true };
            controllerMock.Protected().Setup<RedirectToRouteResult>("RedirectIfAuthorized", "Index").Returns(expected);
            RedirectToRouteResult actual = controllerMock.Object.Create(<#= Model.ViewName #>) as RedirectToRouteResult;

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Method: Details(String id)

        [Test]
        public void Details_Returns<#= Model.View #>()
        {
            <#= Model.View #> expected = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.GetView("Test")).Returns(expected);
            <#= Model.View #> actual = controller.Details("Test").Model as <#= Model.View #>;

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Method: Edit(String id)

        [Test]
        public void Edit_Returns<#= Model.View #>()
        {
            <#= Model.View #> expected = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.GetView("Test")).Returns(expected);
            <#= Model.View #> actual = controller.Edit("Test").Model as <#= Model.View #>;

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Method: Edit(<#= Model.View #> <#= Model.ViewName #>)

        [Test]
        public void Edit_ReturnsSameModelIfCanNotEdit()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanEdit(<#= Model.ViewName #>)).Returns(false);

            Assert.AreSame(<#= Model.ViewName #>, (controller.Edit(<#= Model.ViewName #>) as ViewResult).Model);
        }

        [Test]
        public void Edit_Edits<#= Model.View #>()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanEdit(<#= Model.ViewName #>)).Returns(true);
            serviceMock.Setup(mock => mock.Edit(<#= Model.ViewName #>));
            controller.Edit(<#= Model.ViewName #>);

            serviceMock.Verify(mock => mock.Edit(<#= Model.ViewName #>), Times.Once());
        }

        [Test]
        public void Edit_AfterSuccessfulEditRedirectsToIndexIfAuthorized()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanEdit(<#= Model.ViewName #>)).Returns(true);
            serviceMock.Setup(mock => mock.Edit(<#= Model.ViewName #>));

            RedirectToRouteResult expected = new RedirectToRouteResult(new RouteValueDictionary());
            Mock<<#= Model.Controller #>> controllerMock = new Mock<<#= Model.Controller #>>(serviceMock.Object) { CallBase = true };
            controllerMock.Protected().Setup<RedirectToRouteResult>("RedirectIfAuthorized", "Index").Returns(expected);
            RedirectToRouteResult actual = controllerMock.Object.Edit(<#= Model.ViewName #>) as RedirectToRouteResult;

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Method: Delete(String id)

        [Test]
        public void Delete_Returns<#= Model.View #>()
        {
            <#= Model.View #> expected = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.GetView("Test")).Returns(expected);
            <#= Model.View #> actual = controller.Delete("Test").Model as <#= Model.View #>;

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Method: DeleteConfirmed(String id)

        [Test]
        public void DeleteConfirmed_ReturnsSameModelIfCanNotDelete()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanDelete(<#= Model.ViewName #>.Id)).Returns(false);
            serviceMock.Setup(mock => mock.GetView(<#= Model.ViewName #>.Id)).Returns(<#= Model.ViewName #>);

            Assert.AreSame(<#= Model.ViewName #>, (controller.DeleteConfirmed(<#= Model.ViewName #>.Id) as ViewResult).Model);
        }

        [Test]
        public void DeleteConfirmed_Deletes<#= Model.View #>()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.CanDelete(<#= Model.ViewName #>.Id)).Returns(true);
            serviceMock.Setup(mock => mock.Delete(<#= Model.ViewName #>.Id));
            controller.DeleteConfirmed(<#= Model.ViewName #>.Id);

            serviceMock.Verify(mock => mock.Delete(<#= Model.ViewName #>.Id), Times.Once());
        }

        [Test]
        public void Delete_AfterSuccessfulDeleteRedirectsToIndexIfAuthorized()
        {
            <#= Model.View #> <#= Model.ViewName #> = new <#= Model.View #>();
            serviceMock.Setup(mock => mock.Delete(<#= Model.ViewName #>.Id));
            serviceMock.Setup(mock => mock.CanDelete(<#= Model.ViewName #>.Id)).Returns(true);

            RedirectToRouteResult expected = new RedirectToRouteResult(new RouteValueDictionary());
            Mock<<#= Model.Controller #>> controllerMock = new Mock<<#= Model.Controller #>>(serviceMock.Object) { CallBase = true };
            controllerMock.Protected().Setup<RedirectToRouteResult>("RedirectIfAuthorized", "Index").Returns(expected);
            RedirectToRouteResult actual = controllerMock.Object.DeleteConfirmed(<#= Model.ViewName #>.Id) as RedirectToRouteResult;

            Assert.AreEqual(expected, actual);
        }

        #endregion
    }
}
